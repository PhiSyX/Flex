diff --git a/build/chunk-GCLM3D4C.js b/build/chunk-CSWXTLV3.js
similarity index 99%
rename from build/chunk-GCLM3D4C.js
rename to build/chunk-CSWXTLV3.js
index ada3f8bd8ec3e458f2c265c7db1f1e7366d809d8..81ff24c021d48eac868bfd54bdc2df5ab2f91792 100644
--- a/build/chunk-GCLM3D4C.js
+++ b/build/chunk-CSWXTLV3.js
@@ -1491,6 +1491,9 @@ var Request = class extends Macroable5 {
    */
   host() {
     let host = this.header("host");
+    if (this.secure() && !host) {
+      host = this.header(":authority");
+    }
     if (trustProxy(this.request.socket.remoteAddress, this.#config.trustProxy)) {
       host = this.header("X-Forwarded-Host") || host;
     }
@@ -2117,6 +2120,7 @@ var ResponseStatus = {
 };
 
 // src/response.ts
+import { Buffer as Buffer2 } from "node:buffer";
 import etag from "etag";
 import vary from "vary";
 import fresh2 from "fresh";
@@ -2339,7 +2343,7 @@ var Response = class extends Macroable6 {
    * - Buffer
    */
   #getDataType(content) {
-    if (Buffer.isBuffer(content)) {
+    if (Buffer2.isBuffer(content)) {
       return "buffer";
     }
     if (content instanceof Date) {
@@ -2403,7 +2407,7 @@ var Response = class extends Macroable6 {
       this.#endResponse(null, ResponseStatus.NotModified);
       return;
     }
-    this.header("Content-Length", Buffer.byteLength(content));
+    this.header("Content-Length", Buffer2.byteLength(content));
     if (jsonpCallbackName) {
       this.header("X-Content-Type-Options", "nosniff");
       this.safeHeader("Content-Type", "text/javascript; charset=utf-8");
@@ -4549,4 +4553,4 @@ export {
   Server,
   defineConfig
 };
-//# sourceMappingURL=chunk-GCLM3D4C.js.map
\ No newline at end of file
+//# sourceMappingURL=chunk-CSWXTLV3.js.map
\ No newline at end of file
diff --git a/build/chunk-GCLM3D4C.js.map b/build/chunk-GCLM3D4C.js.map
deleted file mode 100644
index 8910453ebe9a057fad0f2a113b3d27c230d80ec1..0000000000000000000000000000000000000000
diff --git a/build/factories/main.js b/build/factories/main.js
index 24efc28d3397cdacdb0b257f058c56a30b033c41..f7ec82a8a8c3a59e7f5a44f17a71b34042c38634 100644
--- a/build/factories/main.js
+++ b/build/factories/main.js
@@ -6,7 +6,7 @@ import {
   Router,
   Server,
   defineConfig
-} from "../chunk-GCLM3D4C.js";
+} from "../chunk-CSWXTLV3.js";
 
 // factories/http_context.ts
 import { Container } from "@adonisjs/fold";
diff --git a/build/index.js b/build/index.js
index b305ba3d7aec46ce9f45d9319264e686d16eb8a9..87425e33b4356bb5dcc11e98e4d3ee02ba7817ef 100644
--- a/build/index.js
+++ b/build/index.js
@@ -18,7 +18,7 @@ import {
   defineConfig,
   exceptions_exports,
   parseRange
-} from "./chunk-GCLM3D4C.js";
+} from "./chunk-CSWXTLV3.js";
 
 // src/exception_handler.ts
 import is from "@sindresorhus/is";
diff --git a/build/src/redirect.d.ts b/build/src/redirect.d.ts
index 29c79b435e3eef04793b0a5288dc67856a915903..204b25ede544e06f3ad56bdec1f679d94822fd0d 100644
--- a/build/src/redirect.d.ts
+++ b/build/src/redirect.d.ts
@@ -3,12 +3,14 @@ import type { Qs } from './qs.js';
 import type { Response } from './response.js';
 import type { Router } from './router/main.js';
 import type { MakeUrlOptions } from './types/route.js';
+import type { Http2ServerRequest } from 'node:http2';
+type HttpServerRequest = IncomingMessage | Http2ServerRequest;
 /**
  * Exposes the API to construct redirect routes
  */
 export declare class Redirect {
     #private;
-    constructor(request: IncomingMessage, response: Response, router: Router, qs: Qs);
+    constructor(request: HttpServerRequest, response: Response, router: Router, qs: Qs);
     /**
      * Set a custom status code.
      */
@@ -39,3 +41,4 @@ export declare class Redirect {
      */
     toPath(url: string): void;
 }
+export {};
diff --git a/build/src/request.d.ts b/build/src/request.d.ts
index 7536f69ad2db8d23c5b63ac621e4d4232987a1a5..44fe4cac2250ed59bf1b815a9563d5dec55f4a03 100644
--- a/build/src/request.d.ts
+++ b/build/src/request.d.ts
@@ -1,10 +1,13 @@
 import Macroable from '@poppinss/macroable';
 import { UrlWithStringQuery } from 'node:url';
 import type { Encryption } from '@adonisjs/encryption';
+import { Http2ServerRequest, Http2ServerResponse } from 'node:http2';
 import { ServerResponse, IncomingMessage, IncomingHttpHeaders } from 'node:http';
 import type { Qs } from './qs.js';
 import { RequestConfig } from './types/request.js';
 import type { HttpContext } from './http_context/main.js';
+type HttpServerRequest = IncomingMessage | Http2ServerRequest;
+type HttpServerResponse = ServerResponse | Http2ServerResponse;
 /**
  * HTTP Request class exposes the interface to consistently read values
  * related to a given HTTP request. The class is wrapper over
@@ -16,8 +19,8 @@ import type { HttpContext } from './http_context/main.js';
  */
 export declare class Request extends Macroable {
     #private;
-    request: IncomingMessage;
-    response: ServerResponse;
+    request: HttpServerRequest;
+    response: HttpServerResponse;
     /**
      * Parses copy of the URL with query string as a string and not
      * object. This is done to build URL's with query string without
@@ -29,7 +32,7 @@ export declare class Request extends Macroable {
      * reference
      */
     ctx?: HttpContext;
-    constructor(request: IncomingMessage, response: ServerResponse, encryption: Encryption, config: RequestConfig, qsParser: Qs);
+    constructor(request: HttpServerRequest, response: HttpServerResponse, encryption: Encryption, config: RequestConfig, qsParser: Qs);
     /**
      * Returns the request id from the `x-request-id` header. The
      * header is untouched, if it already exists.
@@ -561,3 +564,4 @@ export declare class Request extends Macroable {
         subdomains: Record<string, any>;
     };
 }
+export {};
diff --git a/build/src/response.d.ts b/build/src/response.d.ts
index 83f2f7327eeb26ea3b401cff802c3ac7d6777811..bb5e57e45e118278fd80b491b805dfbe0d41086c 100644
--- a/build/src/response.d.ts
+++ b/build/src/response.d.ts
@@ -1,19 +1,22 @@
 import Macroable from '@poppinss/macroable';
 import type { Encryption } from '@adonisjs/encryption';
+import type { Http2ServerRequest, Http2ServerResponse } from 'node:http2';
 import { ServerResponse, IncomingMessage } from 'node:http';
 import type { Qs } from './qs.js';
 import { Redirect } from './redirect.js';
 import type { Router } from './router/main.js';
 import type { HttpContext } from './http_context/main.js';
 import type { CastableHeader, CookieOptions, ResponseConfig, ResponseStream } from './types/response.js';
+type HttpServerRequest = IncomingMessage | Http2ServerRequest;
+type HttpServerResponse = ServerResponse | Http2ServerResponse;
 /**
  * The response is a wrapper over [ServerResponse](https://nodejs.org/api/http.html#http_class_http_serverresponse)
  * streamlining the process of writing response body and automatically setting up appropriate headers.
  */
 export declare class Response extends Macroable {
     #private;
-    request: IncomingMessage;
-    response: ServerResponse;
+    request: HttpServerRequest;
+    response: HttpServerResponse;
     /**
      * Does response has body set that will written to the
      * response socket at the end of the request
@@ -66,7 +69,7 @@ export declare class Response extends Macroable {
      * reference
      */
     ctx?: HttpContext;
-    constructor(request: IncomingMessage, response: ServerResponse, encryption: Encryption, config: ResponseConfig, router: Router, qs: Qs);
+    constructor(request: HttpServerRequest, response: HttpServerResponse, encryption: Encryption, config: ResponseConfig, router: Router, qs: Qs);
     /**
      * Returns a boolean telling if response is finished or not.
      * Any more attempts to update headers or body will result
@@ -107,7 +110,7 @@ export declare class Response extends Macroable {
      * Under the hood the callback is registered with
      * the "https://github.com/jshttp/on-finished" package
      */
-    onFinish(callback: (err: Error | null, response: ServerResponse) => void): void;
+    onFinish(callback: (err: Error | null, response: HttpServerResponse) => void): void;
     /**
      * Writes headers with the Node.js res object using the
      * response.setHeader method
@@ -154,6 +157,7 @@ export declare class Response extends Macroable {
         "content-range"?: string | undefined;
         "content-security-policy"?: string | undefined;
         "content-security-policy-report-only"?: string | undefined;
+        "content-type"?: string | undefined;
         cookie?: string | string[] | undefined;
         dav?: string | string[] | undefined;
         dnt?: string | undefined;
@@ -623,3 +627,4 @@ export declare class Response extends Macroable {
      */
     httpVersionNotSupported(body?: any, generateEtag?: boolean): void;
 }
+export {};
diff --git a/build/src/server/main.d.ts b/build/src/server/main.d.ts
index aaeaf0ecba8813db8a98e15858f2b2751915377f..cd939195ff5fb4e59a445592b042fa1e18a5e0d9 100644
--- a/build/src/server/main.d.ts
+++ b/build/src/server/main.d.ts
@@ -3,8 +3,9 @@ import type { Encryption } from '@adonisjs/encryption';
 import type { Server as HttpsServer } from 'node:https';
 import type { Application } from '@adonisjs/application';
 import type { EmitterLike } from '@adonisjs/events/types';
-import { ContainerResolver } from '@adonisjs/fold';
 import type { ServerResponse, IncomingMessage, Server as HttpServer } from 'node:http';
+import type { Http2SecureServer, Http2ServerRequest, Http2ServerResponse } from 'node:http2';
+import { ContainerResolver } from '@adonisjs/fold';
 import type { LazyImport } from '../types/base.js';
 import type { MiddlewareAsClass } from '../types/middleware.js';
 import type { ServerConfig, HttpServerEvents, ErrorHandlerAsAClass, TestingMiddlewarePipeline } from '../types/server.js';
@@ -12,6 +13,9 @@ import { Request } from '../request.js';
 import { Response } from '../response.js';
 import { Router } from '../router/main.js';
 import { HttpContext } from '../http_context/main.js';
+type NodeHttpServer = HttpServer | HttpsServer | Http2SecureServer;
+type HttpServerRequest = IncomingMessage | Http2ServerRequest;
+type HttpServerResponse = ServerResponse | Http2ServerResponse;
 /**
  * The HTTP server implementation to handle incoming requests and respond using the
  * registered routes.
@@ -52,12 +56,12 @@ export declare class Server {
     /**
      * Set the HTTP server instance used to listen for requests.
      */
-    setNodeServer(server: HttpServer | HttpsServer): void;
+    setNodeServer(server: NodeHttpServer): void;
     /**
      * Returns reference to the underlying HTTP server
      * in use
      */
-    getNodeServer(): HttpServer<typeof IncomingMessage, typeof ServerResponse> | HttpsServer<typeof IncomingMessage, typeof ServerResponse> | undefined;
+    getNodeServer(): NodeHttpServer | undefined;
     /**
      * Returns reference to the router instance used
      * by the server.
@@ -66,11 +70,11 @@ export declare class Server {
     /**
      * Creates an instance of the [[Request]] class
      */
-    createRequest(req: IncomingMessage, res: ServerResponse): Request;
+    createRequest(req: HttpServerRequest, res: HttpServerResponse): Request;
     /**
      * Creates an instance of the [[Response]] class
      */
-    createResponse(req: IncomingMessage, res: ServerResponse): Response;
+    createResponse(req: HttpServerRequest, res: HttpServerResponse): Response;
     /**
      * Creates an instance of the [[HttpContext]] class
      */
@@ -78,5 +82,6 @@ export declare class Server {
     /**
      * Handle request
      */
-    handle(req: IncomingMessage, res: ServerResponse): Promise<any>;
+    handle(req: HttpServerRequest, res: HttpServerResponse): Promise<any>;
 }
+export {};
