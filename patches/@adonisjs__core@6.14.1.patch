diff --git a/build/modules/ace/codemods.d.ts b/build/modules/ace/codemods.d.ts
index c2d2b9f7dc8b3c10f75b561c8a341d33a716f59f..579dd7734576f38c61f2bc863b407b0b23918c72 100644
--- a/build/modules/ace/codemods.d.ts
+++ b/build/modules/ace/codemods.d.ts
@@ -88,7 +88,7 @@ export declare class Codemods extends EventEmitter {
      * name like :
      *
      * ```
-     * this.installPackages(['@adonisjs/lucid@next', '@adonisjs/auth@3.0.0'])
+     * this.installPackages([{ name: '@adonisjs/lucid@next', isDevDependency: false }])
      * ```
      */
     installPackages(packages: {
diff --git a/build/modules/ace/codemods.js b/build/modules/ace/codemods.js
index 68bcafdf69b96578d1809ddc8a0e394eceb6c056..6aa5ab01042d6ac085b8a6ac63202f9b3f534b61 100644
--- a/build/modules/ace/codemods.js
+++ b/build/modules/ace/codemods.js
@@ -241,7 +241,7 @@ export class Codemods extends EventEmitter {
      * name like :
      *
      * ```
-     * this.installPackages(['@adonisjs/lucid@next', '@adonisjs/auth@3.0.0'])
+     * this.installPackages([{ name: '@adonisjs/lucid@next', isDevDependency: false }])
      * ```
      */
     async installPackages(packages) {
diff --git a/build/src/ignitor/http.d.ts b/build/src/ignitor/http.d.ts
index 27bc224ce101a061f2cb801c02d598765926cfc1..289c558a03c911fafd7606d0b5a8673a508c0dcc 100644
--- a/build/src/ignitor/http.d.ts
+++ b/build/src/ignitor/http.d.ts
@@ -1,15 +1,28 @@
-import type { Server as NodeHttpsServer } from 'node:https';
-import { IncomingMessage, ServerResponse, Server as NodeHttpServer } from 'node:http';
+import { type SecureServerOptions as Http2ServerOptions, type Http2Server, type Http2ServerRequest, type Http2ServerResponse } from 'node:http2';
+import { Server as HttpsServer, type ServerOptions as HttpsServerOptions } from 'node:https';
+import type { IncomingMessage, ServerResponse, Server as Http1Server, ServerOptions as Http1ServerOptions } from 'node:http';
 import { Ignitor } from './main.js';
+type HttpServer = Http1Server | HttpsServer | Http2Server;
+interface HttpServerOptions extends Http1ServerOptions, HttpsServerOptions, Http2ServerOptions {
+}
+type HttpServerRequest = IncomingMessage | Http2ServerRequest;
+type HttpServerResponse = ServerResponse | Http2ServerResponse;
+export interface HttpServerProcessCtorOptions extends HttpServerOptions {
+    /**
+     * Activate HTTPS or HTTP2
+     */
+    https: 1 | 2;
+}
 /**
  * The HTTP server process is used to start the application in the
  * web environment.
  */
 export declare class HttpServerProcess {
     #private;
-    constructor(ignitor: Ignitor);
+    constructor(ignitor: Ignitor, options?: HttpServerProcessCtorOptions);
     /**
      * Start the HTTP server by wiring up the application
      */
-    start(serverCallback?: (handler: (req: IncomingMessage, res: ServerResponse) => any) => NodeHttpsServer | NodeHttpServer): Promise<void>;
+    start(serverCallback?: (handler: (req: HttpServerRequest, res: HttpServerResponse) => any) => HttpServer): Promise<void>;
 }
+export {};
diff --git a/build/src/ignitor/http.js b/build/src/ignitor/http.js
index 13245704fcf30edc50be781ad7904a3923693c29..9e6625e54b7f6a4cd05b360903ebb30c9e121a2f 100644
--- a/build/src/ignitor/http.js
+++ b/build/src/ignitor/http.js
@@ -6,7 +6,9 @@
  * For the full copyright and license information, please view the LICENSE
  * file that was distributed with this source code.
  */
-import { createServer } from 'node:http';
+import { createSecureServer as createHttp2Server } from 'node:http2';
+import { createServer as createHttpsServer } from 'node:https';
+import { createServer as createHttp1Server } from 'node:http';
 import debug from '../debug.js';
 /**
  * The HTTP server process is used to start the application in the
@@ -17,8 +19,13 @@ export class HttpServerProcess {
      * Ignitor reference
      */
     #ignitor;
-    constructor(ignitor) {
+    /**
+     * Les options du serveur HTTP(s).
+     */
+    #httpOptions;
+    constructor(ignitor, options) {
         this.#ignitor = ignitor;
+        this.#httpOptions = options;
     }
     /**
      * Calling this method closes the underlying HTTP server
@@ -59,10 +66,12 @@ export class HttpServerProcess {
         return new Promise((resolve, reject) => {
             const host = process.env.HOST || '0.0.0.0';
             const port = Number(process.env.PORT || '3333');
+            // @ts-expect-error Https/Http2 properties
+            const protocol = nodeHttpServer.key && nodeHttpServer.cert ? 'https' : 'http';
             nodeHttpServer.listen(port, host);
             nodeHttpServer.once('listening', () => {
-                debug('listening to http server, host :%s, port: %s', host, port);
-                resolve({ port, host });
+                debug('listening to %s server, host :%s, port: %s', protocol, host, port);
+                resolve({ protocol, port, host });
             });
             nodeHttpServer.once('error', (error) => {
                 reject(error);
@@ -95,7 +104,19 @@ export class HttpServerProcess {
         /**
          * Method to create the HTTP server
          */
-        const createHTTPServer = serverCallback || createServer;
+        let createHTTPServer = serverCallback || createHttp1Server;
+        switch (this.#httpOptions?.https) {
+            case 1:
+                {
+                    createHTTPServer = createHttpsServer;
+                }
+                break;
+            case 2:
+                {
+                    createHTTPServer = createHttp2Server;
+                }
+                break;
+        }
         const app = this.#ignitor.createApp('web');
         await app.init();
         await app.boot();
@@ -109,7 +130,9 @@ export class HttpServerProcess {
              * Create Node.js HTTP server instance and share it with the
              * AdonisJS HTTP server
              */
-            const httpServer = createHTTPServer(server.handle.bind(server));
+            // @ts-expect-error -- type à améliorer.
+            const httpServer = createHTTPServer(this.#httpOptions, server.handle.bind(server));
+            // @ts-expect-error -- type à améliorer.
             server.setNodeServer(httpServer);
             const logger = await app.container.make('logger');
             const emitter = await app.container.make('emitter');
diff --git a/build/src/ignitor/main.d.ts b/build/src/ignitor/main.d.ts
index 6b2596de4b2e9d71b0c2f747ab2e9a5547dae721..cca1fbbe750b014ce93ea26f2669dd0dd2f5c644 100644
--- a/build/src/ignitor/main.d.ts
+++ b/build/src/ignitor/main.d.ts
@@ -1,6 +1,6 @@
 import { AceProcess } from './ace.js';
 import { TestRunnerProcess } from './test.js';
-import { HttpServerProcess } from './http.js';
+import { HttpServerProcess, HttpServerProcessCtorOptions } from './http.js';
 import type { AppEnvironments } from '../../types/app.js';
 import type { ApplicationService, IgnitorOptions } from '../types.js';
 /**
@@ -27,7 +27,7 @@ export declare class Ignitor {
     /**
      * Get instance of the HTTPServerProcess
      */
-    httpServer(): HttpServerProcess;
+    httpServer(options?: HttpServerProcessCtorOptions): HttpServerProcess;
     /**
      * Get an instance of the AceProcess class
      */
diff --git a/build/src/ignitor/main.js b/build/src/ignitor/main.js
index bd71182de15adc1fdf6a3b7e8db0b5ed50140eb1..538e62a9d27daca1c848a772ede2e81f702e07cd 100644
--- a/build/src/ignitor/main.js
+++ b/build/src/ignitor/main.js
@@ -76,8 +76,8 @@ export class Ignitor {
     /**
      * Get instance of the HTTPServerProcess
      */
-    httpServer() {
-        return new HttpServerProcess(this);
+    httpServer(options) {
+        return new HttpServerProcess(this, options);
     }
     /**
      * Get an instance of the AceProcess class
