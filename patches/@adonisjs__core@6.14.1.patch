diff --git a/build/src/ignitor/http2.d.ts b/build/src/ignitor/http2.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b2e9c25cb8fcbfc87df1d6cb97744f7de3f3c735
--- /dev/null
+++ b/build/src/ignitor/http2.d.ts
@@ -0,0 +1,19 @@
+import type {
+	Server as NodeHttpsServer,
+	Http2ServerRequest,
+	Http2ServerResponse,
+	SecureServerOptions,
+} from 'node:http2';
+import { Ignitor } from './main.js';
+/**
+ * The HTTP server process is used to start the application in the
+ * web environment.
+ */
+export declare class Http2ServerProcess {
+    #private;
+    constructor(ignitor: Ignitor, options: SecureServerOptions);
+    /**
+     * Start the HTTP server by wiring up the application
+     */
+    start(serverCallback?: (handler: (req: Http2ServerRequest, res: Http2ServerResponse) => any) => NodeHttpsServer): Promise<void>;
+}
diff --git a/build/src/ignitor/http2.js b/build/src/ignitor/http2.js
new file mode 100644
index 0000000000000000000000000000000000000000..5d6f4da1e8a4597468250fbb0d4b7f972c58f8e8
--- /dev/null
+++ b/build/src/ignitor/http2.js
@@ -0,0 +1,139 @@
+/*
+ * @adonisjs/core
+ *
+ * (c) AdonisJS
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+import { createSecureServer } from 'node:http2';
+import debug from '../debug.js';
+/**
+ * The HTTP server process is used to start the application in the
+ * web environment.
+ */
+export class Http2ServerProcess {
+    /**
+     * Ignitor reference
+     */
+    #ignitor;
+	/**
+	 * Option HTTP2
+	 */
+	#options;
+
+    constructor(ignitor, options) {
+        this.#ignitor = ignitor;
+		this.#options = options;
+    }
+    /**
+     * Calling this method closes the underlying HTTP server
+     */
+    #close(nodeHttpServer) {
+        return new Promise((resolve) => {
+            debug('closing http server process');
+            nodeHttpServer.close(() => resolve());
+        });
+    }
+    /**
+     * Monitors the app and the server to close the HTTP server when
+     * either one of them goes down
+     */
+    #monitorAppAndServer(nodeHttpServer, app, logger) {
+        /**
+         * Close the HTTP server when the application begins to
+         * terminate
+         */
+        app.terminating(async () => {
+            debug('terminating signal received');
+            await this.#close(nodeHttpServer);
+        });
+        /**
+         * Terminate the app when the HTTP server crashes
+         */
+        nodeHttpServer.once('error', (error) => {
+            debug('http2 server crashed with error "%O"', error);
+            logger.fatal({ err: error }, error.message);
+            process.exitCode = 1;
+            app.terminate();
+        });
+    }
+    /**
+     * Starts the http server a given host and port
+     */
+    #listen(nodeHttpServer) {
+        return new Promise((resolve, reject) => {
+            const host = process.env.HOST || '0.0.0.0';
+            const port = Number(process.env.PORT || '3333');
+            nodeHttpServer.listen(port, host);
+            nodeHttpServer.once('listening', () => {
+                debug('listening to http server, host :%s, port: %s', host, port);
+                resolve({ port, host });
+            });
+            nodeHttpServer.once('error', (error) => {
+                reject(error);
+            });
+        });
+    }
+    /**
+     * Notifies the app and the parent process that the
+     * HTTP server is ready
+     */
+    #notifyServerHasStarted(app, logger, emitter, payload) {
+        /**
+         * Notify parent process
+         */
+        app.notify({ isAdonisJS: true, environment: 'web', ...payload });
+        /**
+         * Visual notification
+         */
+        logger.info('started HTTPS server on %s:%s', payload.host, payload.port);
+        /**
+         * Notify app
+         */
+        emitter.emit('http:server_ready', payload);
+    }
+    /**
+     * Start the HTTP server by wiring up the application
+     */
+    async start(serverCallback) {
+        const startTime = process.hrtime();
+        /**
+         * Method to create the HTTP server
+         */
+        const createHTTP2Server = serverCallback || createSecureServer;
+        const app = this.#ignitor.createApp('web');
+        await app.init();
+        await app.boot();
+        await app.start(async () => {
+            /**
+             * Resolve and boot the AdonisJS HTTP server
+             */
+            const server = await app.container.make('server');
+            await server.boot();
+            /**
+             * Create Node.js HTTP server instance and share it with the
+             * AdonisJS HTTP server
+             */
+            const http2Server = createHTTP2Server(this.#options, server.handle.bind(server));
+            server.setNodeServer(http2Server);
+            const logger = await app.container.make('logger');
+            const emitter = await app.container.make('emitter');
+            /**
+             * Start the server by listening on a port of host
+             */
+            const payload = await this.#listen(http2Server);
+            /**
+             * Notify
+             */
+            this.#notifyServerHasStarted(app, logger, emitter, {
+                ...payload,
+                duration: process.hrtime(startTime),
+            });
+            /**
+             * Monitor app and the server (after the server is listening)
+             */
+            this.#monitorAppAndServer(http2Server, app, logger);
+        });
+    }
+}
diff --git a/build/src/ignitor/main.d.ts b/build/src/ignitor/main.d.ts
index 6b2596de4b2e9d71b0c2f747ab2e9a5547dae721..0a3417e680f1a1cbb2cf3368ce1e2668af652a72 100644
--- a/build/src/ignitor/main.d.ts
+++ b/build/src/ignitor/main.d.ts
@@ -1,8 +1,10 @@
 import { AceProcess } from './ace.js';
 import { TestRunnerProcess } from './test.js';
 import { HttpServerProcess } from './http.js';
+import { Http2ServerProcess } from './http2.js';
 import type { AppEnvironments } from '../../types/app.js';
 import type { ApplicationService, IgnitorOptions } from '../types.js';
+import { SecureServerOptions } from 'http2';
 /**
  * Ignitor is used to instantiate an AdonisJS application in different
  * known environments.
@@ -28,6 +30,10 @@ export declare class Ignitor {
      * Get instance of the HTTPServerProcess
      */
     httpServer(): HttpServerProcess;
+	/**
+     * Get instance of the HTTPSServerProcess
+     */
+    http2Server(options: SecureServerOptions): Http2ServerProcess;
     /**
      * Get an instance of the AceProcess class
      */
diff --git a/build/src/ignitor/main.js b/build/src/ignitor/main.js
index bd71182de15adc1fdf6a3b7e8db0b5ed50140eb1..de895e2327dc87c131dbbf3d2386824fede12baa 100644
--- a/build/src/ignitor/main.js
+++ b/build/src/ignitor/main.js
@@ -10,6 +10,7 @@ import debug from '../debug.js';
 import { AceProcess } from './ace.js';
 import { TestRunnerProcess } from './test.js';
 import { HttpServerProcess } from './http.js';
+import { Http2ServerProcess } from './http2.js';
 import { setApp } from '../../services/app.js';
 import { Application } from '../../modules/app.js';
 /**
@@ -79,6 +80,12 @@ export class Ignitor {
     httpServer() {
         return new HttpServerProcess(this);
     }
+    /**
+     * Get instance of the HTTPServerProcess
+     */
+    http2Server(options) {
+        return new Http2ServerProcess(this, options);
+    }
     /**
      * Get an instance of the AceProcess class
      */
